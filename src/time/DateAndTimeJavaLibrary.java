package time;

public class DateAndTimeJavaLibrary {
    // 자바의 날짜와 시간 라이브러리

    // 자바의 날짜와 시간 라이브러리는 자바 공식 문서가 제공하는 표 하나로 정의할 수 있다.
    // 원문 :  https://docs.oracle.com/javase/tutorial/datetime/iso/overview.html
    // * : 초는 나노초 단위의 정밀도로 캡처된다.
    //  - 밀리초, 나노초가 포함된다.
    // ** : 이 클래스는 정보를 저장하지는 않지만, 이러한 단위로 시간을 제공하는 메서드가 있다.
    // *** : ZonedDateTime에 Period를 추가하면 서머타임 또는 기타 현지 시간 차이를 준수한다.

    // LocalDate, LocalTime, LocalDateTime
    // LocalDate : 날짜만 표현할 때 사용, 년, 월, 일을 다룬다. (2013-11-21)
    // LocalTime : 시간만을 표현할 때 사용, 시, 분, 초를 다룬다. (08:20:30.213)
    // LocalDateTime : LocalDate와 LocalTime을 합한 개념이다. (2013-11-21 08:20:30.213)
    
    // 앞에 Local(현지의, 특정 지역의)이 붙는 이유는 세계 시간대를 고려하지 않아서 타임존이 적용되지 않기 대문이다.
    // 즉, 특정 지역의 날짜와 시간만 고려할 때 사용한다.
    //  - 애플리케이션 개발 시 국내 서비스만 고려할 때
    //  - 나(해외 시간 고려 X)의 생일은 2016년 8월 16일이야를 코드로 작성할 때

    // ZonedDateTime, OffsetDateTime
    // ZonedDateTime : 시간대를 고려한 날짜와 시간을 표현할 때 사용,  여기에는 시간대를 포현하는 타임존이 포함된다.
    //  - 2013-11-21T08:20:30.213+9:00[Asia/Seoul]
    //  - +9:00은 UTC(협정 세계시)로부터의 시간대 차이이며 오프셋이라고 한다.
    //  - 한국은 UTC보다 +9:00 시간이다.
    //  - Asia/Seoul은 타임존이고, 이 타임존을 알면 오프셋과 일광 절약 시간제에 대한 정보를 알 수 있다.
    //  - 일광 절약 시간제가 적용된다.

    // OffsetDateTime : 시간대를 고려한 날짜와 시간을 표현할 때 사용, 여기에는 타임존은 없고 단순히 UTC로부터 시간대 차이인 고정된 오프셋만 포함한다.
    //  - 2013-11-21T08:20:30.213+9:00
    //  - 일광 절약 시간제가 적용되지 않는다.

    // 요약
    // Asia/Seoul 같은 타임존 안에는 일광 절약 시간제에 대한 정보와 UTC+9:00와 같은 UTC로 부터 시간 차이인 오프셋 정보를 모두 포함하고 있다.
    // 일광 절약 시간제(DST, 썸머타임)을 알려면 타임존을 알아야 하고 ZonedDateTime 은 일광 절약 시간제를 함께 처리한다.
    // 반면에 타임존을 알 수 없는 OffsetDateTime 는 일광 절약 시간제를 처리하지 못한다.
    // 따라서 ZonedDateTime 은 시간대를 고려해야 할 때 실제 사용하는 날짜와 시간 정보를 나타내는 데 더 적합하고, OffsetDateTime 은 UTC로부터의 고정된 오프셋만을 고려해야 할 때 유용하다.

    // 오프셋은 세계 협정시로부터의 차이를 의미한다.
    // 타임존은 오프셋과 일광 절약 시간제에 대한 정보를 알 수 있다.

    // Year, Month, YearMonth, MonthDay
    // 년, 월, 년월, 달일을 각각 다룰 때 사용하며 자주 사용하지는 않는다.
    // DayWeek(enum)와 같이 월, 화, 수, 목, 금, 토, 일을 나타내는 클래스도 있다.

    // Instant
    // Instant는 UTC(협정 세계시)를 기준으로 하는 시간의 한 지점을 나타낸다.
    // 날짜와 시간을 나노초 정밀도로 표현하며, 1970년 1월 1일 0시 0분 0초(UTC)를 기준으로 경과한 시간으로 계산된다.
    // 쉽게 이야기해서 Instant 내부에는 초 데이터만 들어있다(나노초 포함).
    // 따라서 날짜와 시간을 계산에 사용할 때는 적합하지 않다(자세한 내용은 뒤에서 다룸).

    // Period, Duration
    // 시간의 개념은 크게 2가지로 표현할 수 있다.
    // 특정 시점의 시간(시각)
    //  - 이 프로젝트는 2013년 8월 16일까지 완료해야 해
    //  - 다음 회의는 11시 30분에 진행한다.
    //  - 내 생일은 8월 16일이야.
    
    // 시간의 간격(기간)
    //  - 앞으로 4년은 더 공부해야 해
    //  - 이 프로젝트는 3개월 남았어
    //  - 라면은 3분 동안 끓여야 해

    // 이처럼 Period와 Duration은 시간의 간격(기간)을 표현하는데 사용된다.
    // 시간의 간격(Duration)은 영어로 amount of time(시간의 양)으로 불린다.

    // Period : 두 날짜 사이의 간격을 년, 월, 일 단위로 나타낸다.
    // Duration : 두 시간 사이의 간격을 시, 분, 초(나노초) 단위로 나타낸다.
}
