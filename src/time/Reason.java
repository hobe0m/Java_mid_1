package time;

import java.sql.Time;

public class Reason {
    // 날짜와 시간 라이브러리가 필요한 이유

    // 1. 날짜와 시간 차이 계산
    // 날짜와 시간을 계산하는 것이 실제로 매우 어렵고 복잡하기 때문, 윤년, 각 달의 일수 등을 모두 고려해야 하며, 간단한 뺄셈 연산으로는 정확한 결과를 얻기 어려움

    // 2. 윤년 계산
    // 지구가 태양을 한 바퀴 도는 데 걸리는 평균 시간은 대략 365.2425 일, 즉 365일 5시간 48분 45초 정도이다.
    // 우리가 사용하는 그레고리력(현재 대부분의 세계가 사용하는 달력)은 1년이 보통 365일로 설정되어 있으므로 둘의 시간이 정확히 맞지 않다.

    // 3. 일광 절약 시간(Daylight Saving Time, DST) 변환
    // 보통 3월에서 10월은 태양이 일찍 뜨고, 나머지는 태양이 상대적으로 늦게 뜬다.
    // 시간도 여기에 맞추어 1시간 앞당기거나 늦추는 제도를 일광 절약 시간제 또는 썸머타임이라 한다.
    // 이로 인해 날짜와 시간 계산 시 1시간의 오차가 발생할 수 있으며, 이를 정확히 계산하는 것은 복잡하다.

    // 4. 타임존 계산
    // 세계는 다양한 타임존으로 나뉘어 있으며 각 타임존은 UTC(협정 세계시)로부터의 시간 차이로 정의된다.
    // 이처럼 타임존 간의 날짜와 시간 변환을 계산하는 것은 복잡하다.

    // 참고, 타임존 목록(자주 사용하는 것들)
    //  - Europe/London
    //  - GMT(그리니치 평균시, Greenwich Mean Time) : 처음 세계 시간을 만들 때 영국 런던에 있는 그리니치 천문대가 기준이었고, 따라서 태양이 그리니치 천문대를 통과할 때를 정오로 한다.
    //  - UTC(협정 세계시, Universal Time Coordinated) : 역사적으로 GMT가 국제적인 시간 표준으로 사용되었고, UTC가 나중에 이를 대체하기 위해 도입되었다.
    //   - UTC는 원자 시계를 사용하여 측정한 국제적으로 합의된 시간 체계, 지구의 자전 속도가 변화하는 것을 고려하여 윤초를 추가하거나 빼는 방식으로 시간을 조정함으로써, 보다 정확한 시간을 유지
    //   - GMT와 UTC는 거의 차이가 없기 때문에 GMT와 UTC가 종종 같은 의미로 사용될 수 있지만, 정밀한 시간 측정과 국제적인 표준에 관해서는 UTC가 선호된다.
    //  - US / Arizona -07:00
    //  - America / New_York -05:00
    //  - Asia / Seoul +09:00
    //  - Asia / Dubai +04:00
    //  - Asia / Istanbul +03:00
    //  - Asia / Shanghai +08:00
    //  - Europe / Paris +01:00
    //  - Asia / Istanbul +03:00

    // London/ UTC / GMT는 세계 시간의 기준이 되는 00:00 시간대이다.
    
    // 서울(UTC +9)과 베를린(UTC +1) 사이의 타임존 차이는 8시간, 이는 서울의 시간이 베를린의 시간보다 8시간 더 앞서있다는 것을 의미
    // 즉, 서울(오후 9시), 베를린(오후 9시 - 8시간 = 오후 1시)

    // 주의할 점
    // 일광 절약 시간(DST) : 일광 절약 시간이 적용되는 경우, 타임존 차이가 변할 수 있다.
    // 예를 들어, 베를린에서 DST가 적용되면 UTC+1는 UTC+2가 되어, 타임존 차이는 7시간으로 줄어든다.
    // 베를린의 경우 3월 마지막 일요일에서 10월 마지막 일요일까지 DST가 적용된다.

    // 이러한 복잡성 때문에 대부분의 현대 개발 환경에서는 날짜와 시간을 처리하기 위해 잘 설계된 라이브러리를 사용해야 한다.
    // 자바의 시간과 날짜 라이브러리는 위에서 언급한 복잡한 계산을 추상화하여 제공하므로, 개발자는 보다 안정적이고 정확하며 효율적인 코드를 작성할 수 있다.
    // 직접하면 거의 100% 오류가 발생(거의 불가능)한다.
}
