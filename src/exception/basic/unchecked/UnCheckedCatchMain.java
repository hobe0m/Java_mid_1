package exception.basic.unchecked;

public class UnCheckedCatchMain {
    public static void main(String[] args) {
        Service service = new Service();
        service.callCatch();
        System.out.println("정상 종료");

        // 언체크 예외도 필요한 경우 예외를 잡아서 처리할 수 있다.
    }

    // 언체크 예외의 장단점
    // 언체크 예외는 예외를 잡아서 처리할 수 없을 때, 예외를 밖으로 던지는 throws 예외를 생략할 수 있다.
    //  - 정말정말 중요한 경우에만 잡아서 던지고 기본적으로는 생략한다.
    // 이것 때문에 장점과 단점이 동시에 존재한다.
    //  - 장점 : 신경쓰고 싶지 않은 언체크 예외를 무시할 수 있고 체크 예외의 경우 처리할 수 없는 예외를 밖으로 던지려면 항상 throws 예외를 선언해야 하지만 언체크 예외는 생략할 수 있다.
    //  - 단점 : 언체크 예외는 개발자가 실수로 예외를 누락할 수 있고 반면에 체크 예외는 컴파일러를 통해 예외 누락을 잡아준다.

    // 언체크 예외는 예외 처리를 실수로 놓칠 수 있는 가능성이 크다.

    // 정리
    // 체크 예외와 언체크 예외의 차이는 예외를 처리할 수 없을 때 예외를 밖으로 던지는 부분을 필수로 선언해야 하는가 혹은 생략할 수 있는가의 차이이다.
    // 사실 체크 예외와 언체크 예외를 구분하지 않고 그냥 저 정도 차이만 있다라고 알고 있으면 된다.
}
