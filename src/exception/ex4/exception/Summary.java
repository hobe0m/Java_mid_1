package exception.ex4.exception;

public class Summary {
    // 예외 처리 정리
    // 예외 처리가 필요한 이유
    // 처음에는 문자로 성공과 실패(오류를 문자열 리턴으로)를 반환하게끔 하여 테스트
    // 리턴된 반환값으로 예외를 처리해 보니 정상 흐름과 예외 흐름이 섞인다는 문제가 발생

    // 즉, 반환값을 사용해 오류를 처리하려고 하면 정상 흐름과 예외 흐름이 섞임
    // 따라서 분리하기 위한 노력으로 반환이 아니라 자바 예외 처리(try ~ catch)로 해결

    // 예외에는 계층이 있고 실질적으로는 Exception과 RuntimeException을 주로 사용
    //  - Exception은 체크 예외, RuntimeException은 런타임 예외
    //  - 체크 예외는 컴파일러가 알림, 언체크 예외는 알리지 않고 잡지 않았을 경우 외부로 자동 던짐
    //  - 따라서 체크 예외는 개발자가 명시적으로 처리(던지는 것도 명시)해야 한다.
    //   - 잡거나 던져야 하는데 최종적으로는 잡아줘야 한다.

    // 즉, 언체크 예외는 throws 생략 가능, 체크 예외는 throws로 명시적 표현

    // 예외는 무조건 잡거나 던져야 한다.

    // pdf를 보면서 쭉 코드 따라 읽고 이해해보기
}
